from http.server import BaseHTTPRequestHandler, HTTPServer
import json
import urllib

books = []
users = []

class LibraryHTTPRequestHandler(BaseHTTPRequestHandler):
    def _set_response(self, status=200, content_type='application/json'):
        self.send_response(status)
        self.send_header('Content-type', content_type)
        self.end_headers()

    def do_GET(self):
        parsed_path = urllib.parse.urlparse(self.path)
        path_parts = parsed_path.path.split('/')[1:]

        if len(path_parts) == 1 and path_parts[0] == 'books':
            self._get_books()
        elif len(path_parts) == 2 and path_parts[0] == 'books':
            self._get_book_by_id(int(path_parts[1]))
        elif len(path_parts) == 3 and path_parts[0] == 'books' and path_parts[2] == 'availability':
            self._get_book_availability(int(path_parts[1]))
        elif len(path_parts) == 3 and path_parts[0] == 'users' and path_parts[2] == 'borrowed_books':
            self._get_borrowed_books(int(path_parts[1]))
        else:
            self._set_response(404)
            self.wfile.write(json.dumps({'error': 'Not Found'}).encode('utf-8'))

    def do_POST(self):
        parsed_path = urllib.parse.urlparse(self.path)
        path_parts = parsed_path.path.split('/')[1:]

        if len(path_parts) == 1 and path_parts[0] == 'books':
            # POST /books
            self._add_book()
        elif len(path_parts) == 3 and path_parts[0] == 'books' and path_parts[2] == 'borrow':
            # POST /books/:id/borrow
            self._borrow_book(int(path_parts[1]))
        else:
            self._set_response(404)
            self.wfile.write(json.dumps({'error': 'Not Found'}).encode('utf-8'))

    def do_PUT(self):
        parsed_path = urllib.parse.urlparse(self.path)
        path_parts = parsed_path.path.split('/')[1:]

        if len(path_parts) == 2 and path_parts[0] == 'books':
            # PUT /books/:id
            self._update_book(int(path_parts[1]))
        else:
            self._set_response(404)
            self.wfile.write(json.dumps({'error': 'Not Found'}).encode('utf-8'))

    def do_DELETE(self):
        parsed_path = urllib.parse.urlparse(self.path)
        path_parts = parsed_path.path.split('/')[1:]

        if len(path_parts) == 2 and path_parts[0] == 'books':
            # DELETE /books/:id
            self._delete_book(int(path_parts[1]))
        else:
            self._set_response(404)
            self.wfile.write(json.dumps({'error': 'Not Found'}).encode('utf-8'))

def run(server_class=HTTPServer, handler_class=LibraryHTTPRequestHandler, port=8000):
    server_address = ('', port)
    httpd = server_class(server_address, handler_class)
    print(f'Starting httpd server on port {port}')
    httpd.serve_forever()

if __name__ == "__main__":
    run()
